service: auditoria-back
frameworkVersion: '3'
useDotenv: true
configValidationMode: warn
plugins:
  - serverless-plugin-typescript
  - serverless-tscpaths #should be after serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-associate-waf
  - serverless-domain-manager
  - serverless-plugin-lambda-insights
  - serverless-prune-plugin
  - serverless-plugin-conditional-functions
  - serverless-newrelic-lambda-layers
  - serverless-offline #needs to be last in the list
provider:
  name: aws
  architecture: arm64
  memorySize: >-
    ${file(./resources/serverless.${self:provider.stage}.yml):provider.memorySize}
  region: ${opt:region}
  stage: ${opt:stage}
  runtime: nodejs18.x
  timeout: ${file(./resources/serverless.${self:provider.stage}.yml):provider.timeout}
  versionFunctions: true
  stackName: serverless-${self:service}-${self:provider.stage}
  logRetentionInDays: 3
  iam:
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${self:service}-role-application
  stackTags:
    Account: ${env:VS}-${self:provider.stage}
    App: ${self:service}
    Environment: ${self:provider.stage}
    Name: ${self:service}
    Entity: ${env:VS}
    Product: hackathon
    Service-Provided: lambda
    Squad: auditoriaatendimento
    Tier: backend
    VS: ${env:VS}
  deploymentBucket:
    name: sls-vs-${env:VS}-${self:provider.stage}-deployment
  environment: ${file(./resources/serverless.${self:provider.stage}.yml):environment}
  apiGateway:
    apiKeys:
      - name: ${self:service}-${self:provider.stage}
        description: api key ${self:service} de ${self:provider.stage}
    apiKeySourceType: HEADER
    disableDefaultEndpoint: true
  logs:
    restApi:
      accessLogging: false
      executionLogging: true
  tracing:
    apiGateway: true
  vpc: ${file(./resources/serverless.${self:provider.stage}.yml):provider.vpc}

package:
  individually: false
  excludeDevDependencies: true
  patterns:
    - src/**
    - '!.github/**'
    - '!.scafflater/**'
    - '!.scannerwork/**'
    - '!.vscode/**'
    - '!coverage/**'
    - '!dist-*/**'
    - '!dist/**'
    - '!kube/**'
    - '!resources/**'
    - '!tests/**'
    - '!.editorconfig'
    - '!.eslintrc.json'
    - '!.gitignore'
    - '!.nvmrc'
    - '!.prettier*'
    - '!catalog-info.yaml'
    - '!jest.config.js'
    - '!package.json'
    - '!package-lock.json'
    - '!Jenkinsfile'
    - '!jenkins.env'
    - '!README.md'
    - '!scripts.sh'
    - '!serverless.yml'
    - '!sonar-project.properties'

custom:
  lambdaInsights:
    defaultLambdaInsights: true
  newRelic:
    accountId: ${env:NEWRELIC_ACCOUNT_ID}
    apiKey: ${env:NEWRELIC_API_KEY}
    disableAutoSubscription: true
    disableLicenseKeySecret: true
    enableFunctionLogs: true
    enableIntegration: false
    linkedAccount: vs-${env:VS}-${self:provider.stage}
    trustedAccountKey: ${env:NEWRELIC_TRUSTED_ACCOUNT_KEY}
  prune:
    automatic: true
    number: 3
  associateWaf:
    name: acl-backend
    version: V2
  customDomain:
    enabled: true
    domainName: ${self:service}.hack.gb.tech
    stage: ${self:provider.stage}
    createRoute53Record: false
    basePath: ''
  serverlessOffline:
    useChildProcesses: true

functions:
  defaultFunction:
    enabled: true
    disableLogs: true
    architecture: ${self:provider.architecture}
    handler: 'src/main/routes/default-function-route.getApiDocsHandler'
    events:
      - http:
          path: /default-function
          method: get
          cors:
            origin: '*'
            headers: '*'
          private: true

  envVariables:
    enabled: true
    disableLogs: true
    architecture: ${self:provider.architecture}
    handler: 'src/main/routes/env-variables-route.getEnvVariablesHandler'
    events:
      - http:
          path: /env-variables
          method: get

  apiDocs:
    enabled: true
    disableLogs: true
    architecture: ${self:provider.architecture}
    handler: 'src/main/routes/api-docs-route.getApiDocsHandler'
    events:
      - http:
          path: /api-docs
          method: get

  swaggerJson:
    enabled: true
    disableLogs: true
    architecture: ${self:provider.architecture}
    handler: 'src/main/routes/swagger-json-route.getSwaggerJsonHandler'
    events:
      - http:
          path: /swagger.json
          method: get
